{"version":3,"file":"index.umd.min.js","sources":["../node_modules/string-convert/camel2hyphen.js","../node_modules/json2mq/index.js","../src/helpers.js","../src/utils.js","../src/component.js","../src/index.js"],"sourcesContent":["var camel2hyphen = function (str) {\n  return str\n          .replace(/[A-Z]/g, function (match) {\n            return '-' + match.toLowerCase();\n          })\n          .toLowerCase();\n};\n\nmodule.exports = camel2hyphen;","var camel2hyphen = require('string-convert/camel2hyphen');\n\nvar isDimension = function (feature) {\n  var re = /[height|width]$/;\n  return re.test(feature);\n};\n\nvar obj2mq = function (obj) {\n  var mq = '';\n  var features = Object.keys(obj);\n  features.forEach(function (feature, index) {\n    var value = obj[feature];\n    feature = camel2hyphen(feature);\n    // Add px to dimension features\n    if (isDimension(feature) && typeof value === 'number') {\n      value = value + 'px';\n    }\n    if (value === true) {\n      mq += feature;\n    } else if (value === false) {\n      mq += 'not ' + feature;\n    } else {\n      mq += '(' + feature + ': ' + value + ')';\n    }\n    if (index < features.length-1) {\n      mq += ' and '\n    }\n  });\n  return mq;\n};\n\nvar json2mq = function (query) {\n  var mq = '';\n  if (typeof query === 'string') {\n    return query;\n  }\n  // Handling array of media queries\n  if (query instanceof Array) {\n    query.forEach(function (q, index) {\n      mq += obj2mq(q);\n      if (index < query.length-1) {\n        mq += ', '\n      }\n    });\n    return mq;\n  }\n  // Handling single media query\n  return obj2mq(query);\n};\n\nmodule.exports = json2mq;","import json2mq from 'json2mq'\n\nexport function convertBreakpointsToMediaQueries(breakpoints) {\n  const keys = Object.keys(breakpoints)\n  const values = keys.map(key => breakpoints[key])\n  const breakpointValues = [0, ...values.slice(0, -1)]\n  const mediaQueries = breakpointValues.reduce((sum, value, index) => {\n    const options = Object.assign(\n      {\n        minWidth: value,\n      },\n      index < keys.length - 1 ? { maxWidth: breakpointValues[index+1] - 1 } : {}\n    )\n    const mediaQuery = json2mq(options)\n    return Object.assign(\n      sum,\n      {\n        [keys[index]]: mediaQuery,\n      }\n    )\n  }, {})\n  return mediaQueries\n}\n\nexport function selectBreakpoints(breakpoints, currentBreakpoint) {\n  const index = breakpoints.findIndex(b => b === currentBreakpoint)\n  return breakpoints.slice(index)\n}\n\nexport function subscribeToMediaQuery(mediaQuery, enter) {\n  const mql = window.matchMedia(mediaQuery)\n  const cb = ({ matches }) => {\n    if (matches) enter()\n  }\n  mql.addListener(cb) //subscribing\n  cb(mql) //initial trigger\n}","import { ref, readonly } from \"vue\";\nconst state = {\n  mqAvailableBreakpoints: ref({}),\n  currentBreakpoint: ref(\"\")\n}\n\nexport const setAvailableBreakpoints = (v) => state.mqAvailableBreakpoints.value = v;\nexport const mqAvailableBreakpoints = readonly(state.mqAvailableBreakpoints);\n\nexport const setCurrentBreakpoint = (v) => state.currentBreakpoint.value = v;\nexport const currentBreakpoint = readonly(state.currentBreakpoint);\n\nexport function isArray (arg) {\n  return Object.prototype.toString.call(arg) === '[object Array]';\n}\n","// USAGE\n// mq-layout(mq=\"lg\")\n//   p Iâ€™m lg\nimport { selectBreakpoints } from \"./helpers\";\nimport { isArray } from \"./utils\";\nimport { mqAvailableBreakpoints, currentBreakpoint } from \"./utils\";\nimport { computed, h } from \"vue\";\n\nexport default {\n    name: \"MqLayout\",\n    props: {\n        mq: {\n            required: true,\n            type: [String, Array],\n        },\n    },\n    setup(props, context) {\n        const plusModifier = computed(\n            () => !isArray(props.mq) && props.mq.slice(-1) === \"+\"\n        );\n        const activeBreakpoints = computed(() => {\n            const breakpoints = Object.keys(mqAvailableBreakpoints.value);\n            const mq = plusModifier.value\n                ? props.mq.slice(0, -1)\n                : isArray(props.mq)\n                ? props.mq\n                : [props.mq];\n            return plusModifier.value ? selectBreakpoints(breakpoints, mq) : mq;\n        });\n\n        const shouldRenderChildren = computed(() =>\n            activeBreakpoints.value.includes(currentBreakpoint.value)\n        );\n        return () =>\n            shouldRenderChildren.value\n                ? h(\"div\", {}, context.slots.default())\n                : h();\n    },\n};\n","import { subscribeToMediaQuery, convertBreakpointsToMediaQueries } from './helpers.js'\nimport MqLayout from './component.js'\nimport { setAvailableBreakpoints, setCurrentBreakpoint, currentBreakpoint } from \"./utils\";\n\nconst DEFAULT_BREAKPOINT = {\n  sm: 450,\n  md: 1250,\n  lg: Infinity,\n}\n\nconst install = function (app, { breakpoints = DEFAULT_BREAKPOINT, defaultBreakpoint = 'sm' } = {}) {  \n  let hasSetupListeners = false\n  setCurrentBreakpoint(defaultBreakpoint);\n\n  // Init reactive component\n  app.mixin({\n    computed: {\n      $mq() {\n        return currentBreakpoint.value;\n      },\n    },\n    mounted() {\n      if (!hasSetupListeners) {\n        const mediaQueries = convertBreakpointsToMediaQueries(breakpoints)\n        // setup listeners\n        for (const key in mediaQueries) {\n          const mediaQuery = mediaQueries[key]\n          const enter = () => { setCurrentBreakpoint(key) }\n          subscribeToMediaQuery(mediaQuery, enter)\n        }\n        hasSetupListeners = true\n      }\n    }\n  })\n\n  app.config.globalProperties.$mqAvailableBreakpoints = breakpoints;\n  setAvailableBreakpoints(breakpoints);\n  app.component('mq-layout', MqLayout)\n}\n\nexport default { install };\n"],"names":["str","replace","match","toLowerCase","obj2mq","obj","mq","features","Object","keys","forEach","feature","index","value","test","isDimension","camel2hyphen","length","query","Array","q","convertBreakpointsToMediaQueries","breakpoints","values","map","key","breakpointValues","slice","reduce","sum","options","assign","minWidth","maxWidth","mediaQuery","json2mq","subscribeToMediaQuery","enter","mql","window","matchMedia","cb","matches","addListener","state","mqAvailableBreakpoints","ref","currentBreakpoint","setAvailableBreakpoints","v","readonly","setCurrentBreakpoint","isArray","arg","prototype","toString","call","name","props","required","type","String","setup","context","plusModifier","computed","activeBreakpoints","findIndex","b","selectBreakpoints","shouldRenderChildren","includes","h","slots","DEFAULT_BREAKPOINT","sm","md","lg","Infinity","install","app","defaultBreakpoint","hasSetupListeners","mixin","$mq","mounted","mediaQueries","config","globalProperties","$mqAvailableBreakpoints","component","MqLayout"],"mappings":"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"}